using System;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using System.Text;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace PropertyHookGenerator.Library
{
    [Generator]
    public sealed class PropertyHookGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            // SpinWait.SpinUntil(() => Debugger.IsAttached);

            context.RegisterForSyntaxNotifications(() => new FieldDeclarationSyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            var sourceBuilder = new StringBuilder()
                .AppendLine("// <autogenerated />");

            if (!(context.SyntaxReceiver is FieldDeclarationSyntaxReceiver syntaxReceiver))
                return;

            var compilation = context.Compilation;
            
            foreach (var fieldDeclaration in syntaxReceiver.FieldDeclarations)
            {
                context.CancellationToken.ThrowIfCancellationRequested();

                if( !(fieldDeclaration.Parent is ClassDeclarationSyntax classDeclarationSyntax) ) continue;
                
                if( !(classDeclarationSyntax.Parent is NamespaceDeclarationSyntax namespaceDeclarationSyntax) ) continue;

                var @namespace = GetNamespace(classDeclarationSyntax);
                var className = classDeclarationSyntax.Identifier.ValueText;

                var type = fieldDeclaration.Declaration.Type.ToFullString();
                var fieldName = fieldDeclaration.Declaration.ToFullString().Split()[1];
                    var propertyName = CultureInfo.CurrentCulture.TextInfo
                        .ToTitleCase(fieldName.Replace("_", string.Empty));

                var didSetAttribute = fieldDeclaration
                    .AttributeLists.SelectMany(al =>
                        al.Attributes.Select(at => at))
                    .FirstOrDefault(x => x.Name.ToFullString() == "DidSet");
                
                if(didSetAttribute is null) continue;

                var beforeMethodNameSyntax = didSetAttribute.ArgumentList!.Arguments.First();

                var beforeMethodName =
                    beforeMethodNameSyntax.ToFullString().Contains("nameof(")
                        ? beforeMethodNameSyntax.ToFullString().Replace("nameof(", string.Empty).Replace(")", string.Empty)
                        : beforeMethodNameSyntax.ToFullString().Replace('\"'.ToString() , string.Empty );

                sourceBuilder
                    .AppendLine($"namespace {@namespace}")
                    .AppendLine("{")
                    .AppendLine($"public partial class {className}")
                    .AppendLine("{")
                    .AppendLine($"    public {type} {propertyName}")
                    .AppendLine("    {")
                    .AppendLine($"       get => {fieldName};")
                    .AppendLine($"       set")
                    .AppendLine("        {")
                    .AppendLine($"             var oldValue = {fieldName};")
                    .AppendLine($"            {beforeMethodName}(oldValue , value);")
                    .AppendLine($"            {fieldName} = value;")
                    .AppendLine("        }")
                    .AppendLine("    }")
                    .AppendLine("}")
                    .AppendLine("}");
            }

            var sourceText = sourceBuilder.ToString();
            var source = SourceText.From(sourceText, Encoding.UTF8);
            context.AddSource(nameof(PropertyHookGenerator), source);
        }
        
        
        internal static string GetNamespace(SyntaxNode syntaxNode)
        {
            return syntaxNode.Parent switch
            {
                NamespaceDeclarationSyntax namespaceDeclarationSyntax => namespaceDeclarationSyntax.Name.ToString(),
                null => string.Empty,
                _ => GetNamespace(syntaxNode.Parent)
            };
        }
    }
}
